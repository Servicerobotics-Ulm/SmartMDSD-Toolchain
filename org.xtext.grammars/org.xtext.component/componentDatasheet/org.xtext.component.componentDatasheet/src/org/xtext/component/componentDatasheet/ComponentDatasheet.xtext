// automatically generated by Xtext
grammar org.xtext.component.componentDatasheet.ComponentDatasheet with org.eclipse.xtext.common.Terminals

import "http://www.ecore.org/componentDatasheet" 
import "http://www.ecore.org/base/genericDatasheet" as genericDatasheet
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.ecore.org/component/ComponentDefinition" as componentDefinition

ComponentDatasheet returns ComponentDatasheet:
	'ComponentDatasheet' component=[componentDefinition::ComponentDefinition]
	'{'
		(
			('shortDescrition' (':')? shortDescrition=EString) &
			('baseURI' (':')? baseURI=EString) &
			('longDescription' (':')? longDescription=TEXT_BLOCK)? &
			('supplierDescription' (':')? supplierDescription=EString)? &
			('homepage' (':')? homepage=EString)? &
			('trl' (':')? trl=TRL)? &
			('purposeDescription' (':')? purposeDescription=EString)? &
			('hardwareRequirementDescription' (':')? hardwareRequirementDescription=EString)? &
			('license' (':')? license=AbstractLicense)?
		)
	'}';

AbstractLicense returns genericDatasheet::AbstractLicense:
	SpdxLicense | ProprietaryLicense;

terminal TEXT_BLOCK returns ecore::EString: '$%' -> '%$';

//terminal SPDX_ID returns ecore::EString: '(' ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'-'|'0'..'9')* ')';

EString returns ecore::EString:
	STRING;

enum TRL returns TRL:
				LEVEL1 = 'Level1' | LEVEL2 = 'Level2' | LEVEL3 = 'Level3' | LEVEL4 = 'Level4' | LEVEL5 = 'Level5' | LEVEL6 = 'Level6' | LEVEL7 = 'Level7' | LEVEL8 = 'Level8' | LEVEL9 = 'Level9' | UNDEFINED = 'Undefined';


SpdxLicense returns genericDatasheet::SpdxLicense:
	'spdx' '(' licenseID=EString ')'
;

ProprietaryLicense returns genericDatasheet::ProprietaryLicense:
	{genericDatasheet::ProprietaryLicense}
	'proprietary'
	'{'
		(
			('name' (':')? name=EString) &
			('fullText' (':')? fullText=EString)? &
			('URL' (':')? url=EString)?
		)
	'}';
