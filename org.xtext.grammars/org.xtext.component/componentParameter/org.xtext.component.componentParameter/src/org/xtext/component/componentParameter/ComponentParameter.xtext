//===================================================================================
//
//  Copyright (C) 2017 Alex Lotz, Dennis Stampfer, Matthias Lutz, Christian Schlegel
//
//        lotz@hs-ulm.de
//        stampfer@hs-ulm.de
//        lutz@hs-ulm.de
//        schlegel@hs-ulm.de
//
//        Servicerobotik Ulm
//        Christian Schlegel
//        Ulm University of Applied Sciences
//        Prittwitzstr. 10
//        89075 Ulm
//        Germany
//
//  This file is part of the SmartMDSD Toolchain V3. 
//
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  
//  1. Redistributions of source code must retain the above copyright notice, 
//     this list of conditions and the following disclaimer.
//  
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//     this list of conditions and the following disclaimer in the documentation 
//     and/or other materials provided with the distribution.
//  
//  3. Neither the name of the copyright holder nor the names of its contributors 
//     may be used to endorse or promote products derived from this software 
//     without specific prior written permission.
//  
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
//  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
//  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
//  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
//  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
//  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
//  OF THE POSSIBILITY OF SUCH DAMAGE.
//
//===================================================================================
grammar org.xtext.component.componentParameter.ComponentParameter with org.xtext.service.parameterDefinition.ParameterDefinition

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.ecore.org/base/BasicAttributes" as basicAttributes
import "http://www.ecore.org/service/ParameterDefinition" as parameterDefinition
import "http://www.ecore.org/component/ComponentDefinition" as componentDefinition
import "http://www.ecore.org/component/ComponentParameter" as componentParam

ComponentParamModel returns componentParam::ComponentParamModel:
	{componentParam::ComponentParamModel}
	imports+=super::ParamDefRepoImport*
	(parametrization=ComponentParameter)?
;

ComponentParameter returns componentParam::ComponentParameter:
	'ComponentParameter' name= ID ('component' component=[componentDefinition::ComponentDefinition|FQN])?
	'{'
		parameters+=AbstractComponentParameter*
	'}';

AbstractComponentParameter returns componentParam::AbstractComponentParameter:
	InternalParameter | ExtendedParameter | ExtendedTrigger | ParameterSetInstance;

InternalParameter returns componentParam::InternalParameter:
	'InternalParameter'	name=ID
	'{'
		attributes+=BasicAttributes::AttributeDefinition*
	'}';

ExtendedParameter returns componentParam::ExtendedParameter:
	'ExtendedParameter' name=ID
	'{'
		attributes+=BasicAttributes::AttributeDefinition*
	'}';

ExtendedTrigger returns componentParam::ExtendedTrigger:
	'ExtendedTrigger' name=ID (active?='active'|'passive')
	'{'
		attributes+=BasicAttributes::AttributeDefinition*
	'}';


ParameterSetInstance returns componentParam::ParameterSetInstance:
	'ParameterSetInstance' paramSet=[parameterDefinition::ParameterSetDefinition|FQN]
	'{'
		parameterInstances+=AbstractParameterInstance*
	'}';

AbstractParameterInstance returns componentParam::AbstractParameterInstance:
	TriggerInstance | ParameterInstance;

TriggerInstance returns componentParam::TriggerInstance:
	'TriggerInstance' triggerDef=[parameterDefinition::TriggerDefinition|FQN]
	(active?='active'|'passive') (';')?
;

ParameterInstance returns componentParam::ParameterInstance:
	'ParameterInstance' parameterDef=[parameterDefinition::ParameterDefinition|FQN]
	'{'
		attributes+=BasicAttributes::AttributeRefinement*
	'}';
