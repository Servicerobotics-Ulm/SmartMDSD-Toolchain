//===================================================================================
//
//  Copyright (C) 2017 Alex Lotz, Dennis Stampfer, Matthias Lutz, Christian Schlegel
//
//        lotz@hs-ulm.de
//        stampfer@hs-ulm.de
//        lutz@hs-ulm.de
//        schlegel@hs-ulm.de
//
//        Servicerobotik Ulm
//        Christian Schlegel
//        Ulm University of Applied Sciences
//        Prittwitzstr. 10
//        89075 Ulm
//        Germany
//
//  This file is part of the SmartMDSD Toolchain V3. 
//
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  
//  1. Redistributions of source code must retain the above copyright notice, 
//     this list of conditions and the following disclaimer.
//  
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//     this list of conditions and the following disclaimer in the documentation 
//     and/or other materials provided with the distribution.
//  
//  3. Neither the name of the copyright holder nor the names of its contributors 
//     may be used to endorse or promote products derived from this software 
//     without specific prior written permission.
//  
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
//  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
//  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
//  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
//  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
//  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
//  OF THE POSSIBILITY OF SUCH DAMAGE.
//
//===================================================================================
grammar org.xtext.system.componentArchitecture.ComponentArchitecture with org.xtext.service.roboticMiddleware.RoboticMiddleware

import "http://www.ecore.org/system/ComponentArchitecture" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.ecore.org/component/ComponentDefinition" as componentDefinition
import "http://www.ecore.org/component/ComponentParameter" as componentParameter
import "http://www.ecore.org/system/SystemParameter" as systemParameter
import "http://www.ecore.org/component/SeronetExtension" as seronetExtension
import "http://www.ecore.org/system/compArchSeronetExtension" as compArchSeronetExtension
import "http://www.ecore.org/system/ActivityArchitecture" as activityArchitecture

SystemComponentArchitecture returns SystemComponentArchitecture:
	{SystemComponentArchitecture}
	'SystemComponentArchitecture' name=ID ('usingActivityArchitecture' activityArch=[activityArchitecture::ActivityArchitectureModel|FQN])?
	'{'
		components+=ComponentInstance*
		connections+=Connection*
	'}';

Connection returns Connection:
	'Connection' from=[RequiredService|FQN] '->' to=[ProvidedService|FQN] ('useMiddleware' middlewareSelection=RoboticMiddleware)? (';')?
;

ComponentInstance returns ComponentInstance:
	'ComponentInstance' name=ID 'instantiates' component=[componentDefinition::ComponentDefinition|FQN]
	'{'
		ports+=ServiceInstance*
		extensions+=ComponentInstanceExtension*
	'}';

ComponentInstanceExtension returns ComponentInstanceExtension: 
	ParameterStructInstance | ActivityConfigurationMapping | InputHandlerConfigurationMapping | OpcUaDeviceClientInstance | OpcUaReadServerInstance
;

ParameterStructInstance returns systemParameter::ParameterStructInstance:
	'ParameterStructInstance' parameter=[systemParameter::ComponentParameterInstance|FQN] (';')?
;

ActivityConfigurationMapping returns ActivityConfigurationMapping: 
	'Activity' activity=[componentDefinition::Activity|FQN] 'configuration' config=[activityArchitecture::ActivityNode|FQN] (';')?
;

InputHandlerConfigurationMapping returns InputHandlerConfigurationMapping: 
	'InputHandler' handler=[componentDefinition::InputHandler|FQN] 'configuration' config=[activityArchitecture::InputHandlerNode|FQN] (';')?
;


OpcUaDeviceClientInstance returns compArchSeronetExtension::OpcUaDeviceClientInstance: 
	'OpcUaDeviceClientInstance' deviceClient=[seronetExtension::OpcUaDeviceClient|FQN] 'deviceURI' deviceURI=EString (';')?
;

OpcUaReadServerInstance returns compArchSeronetExtension::OpcUaReadServerInstance: 
	'OpcUaReadServerInstance' readServer=[seronetExtension::OpcUaReadServer|FQN] ('portNumber' portNumber=EInt)? (';')?
;


ServiceInstance returns ServiceInstance: 
	RequiredService | ProvidedService
;

RequiredService returns RequiredService:
	'RequiredService' port=[componentDefinition::ComponentPort] (';')?
;

ProvidedService returns ProvidedService:
	'ProvidedService' port=[componentDefinition::ComponentPort] (';')?
;


