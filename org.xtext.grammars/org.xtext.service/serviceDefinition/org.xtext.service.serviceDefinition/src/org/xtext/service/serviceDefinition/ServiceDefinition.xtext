//===================================================================================
//
//  Copyright (C) 2017 Alex Lotz, Dennis Stampfer, Matthias Lutz, Christian Schlegel
//
//        lotz@hs-ulm.de
//        stampfer@hs-ulm.de
//        lutz@hs-ulm.de
//        schlegel@hs-ulm.de
//
//        Servicerobotik Ulm
//        Christian Schlegel
//        Ulm University of Applied Sciences
//        Prittwitzstr. 10
//        89075 Ulm
//        Germany
//
//  This file is part of the SmartMDSD Toolchain V3. 
//
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  
//  1. Redistributions of source code must retain the above copyright notice, 
//     this list of conditions and the following disclaimer.
//  
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//     this list of conditions and the following disclaimer in the documentation 
//     and/or other materials provided with the distribution.
//  
//  3. Neither the name of the copyright holder nor the names of its contributors 
//     may be used to endorse or promote products derived from this software 
//     without specific prior written permission.
//  
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
//  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
//  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
//  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
//  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
//  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
//  OF THE POSSIBILITY OF SUCH DAMAGE.
//
//===================================================================================
grammar org.xtext.service.serviceDefinition.ServiceDefinition with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.ecore.org/service/ServiceDefinition" as service
import "http://www.ecore.org/service/CommunicationPattern" as commPattern
import "http://www.ecore.org/service/CoordinationPattern" as coordPattern
import "http://www.ecore.org/service/CommunicationObject" as commObject
import "http://www.ecore.org/service/ParameterDefinition" as param
import "http://www.ecore.org/service/ComponentMode" as modes
import "http://www.ecore.org/base/StateMachine" as stateMachine

ServiceDefModel returns service::ServiceDefModel:
	{service::ServiceDefModel}
	imports+=CommRepoImport*
	(repository=ServiceDefRepository)?
;

// parser rules for names
FQN returns ecore::EString: ID ('.' ID)* ;
FQNW returns ecore::EString: FQN '.*'? ;

EInt returns ecore::EInt:
	'-'? INT;
EString returns ecore::EString:
	STRING;


ServiceDefRepository returns service::ServiceDefRepository:
	'ServiceDefRepository' name=ID ('version' version=ServiceRepoVersion)?
	'{'
		services+=AbstractServiceDefinition*
	'}';

ServiceRepoVersion returns service::ServiceRepoVersion:
	major=EInt '.' minor=EInt ('.' patch=EInt)?
;

CommRepoImport returns service::CommRepoImport:
	'#import' importedNamespace=FQNW (';')?
;


AbstractServiceDefinition returns service::AbstractServiceDefinition:
	CommunicationServiceDefinition | CoordinationServiceDefinition
;

CommunicationServiceDefinition returns service::CommunicationServiceDefinition:
	ForkingServiceDefinition | JoyningServiceDefinition | RequestAnswerServiceDefinition
;


ForkingServiceDefinition returns service::ForkingServiceDefinition: 
	'ForkingServiceDefinition' name=ID
	'{'
		pattern=ForkingPatternInstance
		properties+=ServiceProperty*
	'}'
;

JoyningServiceDefinition returns service::JoiningServiceDefinition: 
	'JoiningServiceDefinition' name=ID
	'{'
		pattern=JoiningPatternInstance
		properties+=ServiceProperty*
	'}'
;


RequestAnswerServiceDefinition returns service::RequestAnswerServiceDefinition: 
	'RequestAnswerServiceDefinition' name=ID
	'{'
		pattern=RequestAnswerPattern
		properties+=ServiceProperty*
	'}'
;



CoordinationServiceDefinition returns service::CoordinationServiceDefinition: 
	'CoordinationServiceDefinition' name=ID
	'{'
		(
			(statePattern=StatePattern)? &
			(parameterPattern=ParameterPattern)? &
			(monitoringPattern=MonitoringPattern)? &
			(wiringPattern=DynamicWiringPattern)?
		)
		services+=CommunicationServiceUsage*
		properties+=ServiceProperty*
	'}'
;

CommunicationServiceUsage returns service::CommunicationServiceUsage:
	'CommunicationServiceUsage' name=ID 'uses' uses=[service::CommunicationServiceDefinition|FQN]
;

StatePattern returns coordPattern::StatePattern:
	{coordPattern::StatePattern}
	'StatePattern' '<' 
		'lifecycle' lifecycle=[stateMachine::StateMachine|FQN]
		('with' modes=[modes::ComponentModeCollection|FQN])?
	'>'
;

ParameterPattern returns coordPattern::ParameterPattern:
	{coordPattern::ParameterPattern} 
	'ParameterPattern' '<' parameterSet=[param::ParameterSetDefinition|FQN] '>'
;

DynamicWiringPattern returns coordPattern::DynamicWiringPattern: 
	{coordPattern::DynamicWiringPattern}
	'DynamicWiringPattern'
;

MonitoringPattern returns coordPattern::MonitoringPattern: 
	{coordPattern::MonitoringPattern}
	'MonitoringPattern'
	//TODO: this rule needs to be extended in future
;

ForkingPatternInstance returns commPattern::ForkingPattern:
	PushPattern | EventPattern 
;

JoiningPatternInstance returns commPattern::JoiningPattern:
	 SendPattern
;

RequestAnswerPattern returns commPattern::RequestAnswerPattern: 
	QueryPattern
;


PushPattern returns commPattern::PushPattern:
	{commPattern::PushPattern}
	'PushPattern' '<' 'DataType' '=' dataType=[commObject::CommunicationObject|FQN] '>'
;
EventPattern returns commPattern::EventPattern:
	{commPattern::EventPattern}
	'EventPattern' '<' 
		('EventType' '=' eventType=[commObject::CommunicationObject|FQN] & 
		'ActivationType' '=' activationType=[commObject::CommunicationObject|FQN] &
		'EventStateType' '=' eventStateType=[commObject::CommunicationObject|FQN]) 
	'>'
;
QueryPattern returns commPattern::QueryPattern:
	{commPattern::QueryPattern}
	'QueryPattern' '<' 
		('RequestType' '=' requestType=[commObject::CommunicationObject|FQN] & 
		'AnswerType' '=' answerType=[commObject::CommunicationObject|FQN])
	'>'
;
SendPattern returns commPattern::SendPattern:
	{commPattern::SendPattern}
	'SendPattern' '<' 'DataType' '=' dataType=[commObject::CommunicationObject|FQN] '>'
;

// this is just a placeholder for the later fully-fledged service-property definition
ServiceProperty returns service::ServiceProperty:
	'ServiceProperty' name=ID
	'{'
	//TODO: add property specification
	'}'
;
