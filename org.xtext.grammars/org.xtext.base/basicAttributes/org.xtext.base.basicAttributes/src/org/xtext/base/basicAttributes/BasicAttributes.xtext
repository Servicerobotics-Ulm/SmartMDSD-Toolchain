//===================================================================================
//
//  Copyright (C) 2017 Alex Lotz, Dennis Stampfer, Matthias Lutz, Christian Schlegel
//
//        lotz@hs-ulm.de
//        stampfer@hs-ulm.de
//        lutz@hs-ulm.de
//        schlegel@hs-ulm.de
//
//        Servicerobotik Ulm
//        Christian Schlegel
//        Ulm University of Applied Sciences
//        Prittwitzstr. 10
//        89075 Ulm
//        Germany
//
//  This file is part of the SmartMDSD Toolchain V3. 
//
//  Redistribution and use in source and binary forms, with or without modification, 
//  are permitted provided that the following conditions are met:
//  
//  1. Redistributions of source code must retain the above copyright notice, 
//     this list of conditions and the following disclaimer.
//  
//  2. Redistributions in binary form must reproduce the above copyright notice, 
//     this list of conditions and the following disclaimer in the documentation 
//     and/or other materials provided with the distribution.
//  
//  3. Neither the name of the copyright holder nor the names of its contributors 
//     may be used to endorse or promote products derived from this software 
//     without specific prior written permission.
//  
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
//  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
//  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
//  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
//  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
//  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
//  OF THE POSSIBILITY OF SUCH DAMAGE.
//
//===================================================================================
grammar org.xtext.base.basicAttributes.BasicAttributes with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.ecore.org/base/BasicAttributes" as attr

AttributeDefinition returns attr::AttributeDefinition:
	name=ID ':' type=AbstractAttributeType ('=' defaultvalue=AbstractValue)? (';')?
;

AttributeRefinement returns attr::AttributeRefinement:
	attribute=[attr::AttributeDefinition|FQN] '=' value=AbstractValue (';')?
;

// parser rules for names
FQN returns ecore::EString: ID ('.' ID)* ;

EBoolean returns ecore::EBoolean:
	'true' | 'false';
EString returns ecore::EString:
	STRING;
EInt returns ecore::EInt:
	'-'? INT;
EDouble returns ecore::EDouble:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;

EnumerationElement returns attr::EnumerationElement:
	name=ID ('=' value=EInt)? (';')?
;

AbstractAttributeType returns attr::AbstractAttributeType:
	PrimitiveType | InlineEnumerationType;

InlineEnumerationType returns attr::InlineEnumerationType:
	'InlineEnumeration' (array=ArrayType)? '{' enums+=EnumerationElement+ '}'
;

ArrayType returns attr::ArrayType:
	{attr::ArrayType}
	'[' (length=Cardinality)? ']'
;
Cardinality returns ecore::EString:
	INT | '*'
;

enum PRIMITIVE_TYPE_NAME returns attr::PRIMITIVE_TYPE_NAME:
	Int8="Int8" | Int16="Int16" | Int32="Int32" | Int64="Int64" |
	UInt8="UInt8" | UInt16="UInt16" | UInt32="UInt32" | UInt64="UInt64" |
	Float="Float" | Double="Double" | String="String" | Boolean="Boolean"
;

PrimitiveType returns attr::PrimitiveType:
	typeName=PRIMITIVE_TYPE_NAME (array=ArrayType)?
;


AbstractValue returns attr::AbstractValue:
	SingleValue | ArrayValue
;

ArrayValue returns attr::ArrayValue:
	'[' values+=SingleValue (',' values+=SingleValue)* ']'
;

SingleValue returns attr::SingleValue:
	{attr::IntValue} value=EInt | 
	{attr::FloatingPointValue} value=EDouble | 
	{attr::StringValue} value=EString | 
	{attr::BoolValue} value=EBoolean |
	{attr::EnumerationValue} value=[attr::EnumerationElement|FQN]
;

