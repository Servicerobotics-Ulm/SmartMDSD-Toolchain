/********************************************************************************
 * Copyright (c) 2019 Technische Hochschule Ulm, Servicerobotics Ulm, Germany
 * 
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 * 
 * SPDX-License-Identifier: EPL-2.0
 * 
 * Contributors:
 *   Matthias Lutz, Alex Lotz, Dennis Stampfer
 ********************************************************************************/
grammar org.eclipse.smartmdsd.xtext.behavior.skillRealization.SkillRealization with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/smartmdsd/behavior/skillRealization" 
import "http://www.eclipse.org/smartmdsd/service/skillDefinition" as skillDefinition
import "http://www.eclipse.org/smartmdsd/service/parameterDefinition" as parameterDefinition
import "http://www.eclipse.org/smartmdsd/service/componentMode" as componentMode
import "http://www.eclipse.org/smartmdsd/service/serviceDefinition" as serviceDefinition
import "http://www.eclipse.org/emf/2002/Ecore" as ecore




SkillRealizationModel returns SkillRealizationModel:
	{SkillRealizationModel}
	'SkillRealizationModel'
	'{'
		modules+=CoordinationModuleRealization*
	'}';
	
FQN:
	ID ('.'ID)*	
;

CoordinationModuleRealization returns CoordinationModuleRealization:
	'CoordinationModuleRealization' name=ID 'coordModuleDef' coordinationModuleDef=[skillDefinition::CoordinationModuleDefinition|FQN]
	'uses' '{' coordInterfaceInsts+=CoordinationInterfaceInstance* '}'
	'{'
		skills+=SkillRealization*
	'}';

CoordinationInterfaceInstance returns CoordinationInterfaceInstance:
	coordinationInterfaceDef=[serviceDefinition::CoordinationServiceDefinition|FQN] 'intsName' name=ID
;


SkillRealization returns SkillRealization:
	'SkillRealization' skillDef=[skillDefinition::SkillDefinition|FQN]
	'{'
		//FIXME: add implementation
		'action' '(' action=CoordinationActionBlock ')'
		
	'}';
	
CoordinationActionBlock returns CoordinationActionBlock:
	{CoordinationActionBlock}
	actions+=AbstractCoordinationAction*
;
	
	
AbstractCoordinationAction returns AbstractCoordinationAction:
	AbstractComponentCoordinationAction
;


AbstractComponentCoordinationAction returns AbstractComponentCoordinationAction:
	ComponentCoordinationActionParameter | ComponentCoordinationActionActivation | ComponentCoordinationActionEvent
;

ComponentCoordinationActionParameter returns ComponentCoordinationActionParameter:
	//(hasValue?=':paramvalue' values+=ExpressionSimple )?
	'tcl-param' ':server' coordinationService=[CoordinationInterfaceInstance] ':param' parameter=[parameterDefinition::AbstractParameter|FQN]  (':paramvalue' value=STRING )?
;

ComponentCoordinationActionActivation returns ComponentCoordinationActionActivation:
	'tcl-state' ':server' coordinationService=[CoordinationInterfaceInstance] ':state' state=[componentMode::ComponentModeDefinition|FQN]
;

ComponentCoordinationActionEvent returns ComponentCoordinationActionEvent:
	 'tcl-activate-event' ':name' ':server' coordinationService=[CoordinationInterfaceInstance]
;
