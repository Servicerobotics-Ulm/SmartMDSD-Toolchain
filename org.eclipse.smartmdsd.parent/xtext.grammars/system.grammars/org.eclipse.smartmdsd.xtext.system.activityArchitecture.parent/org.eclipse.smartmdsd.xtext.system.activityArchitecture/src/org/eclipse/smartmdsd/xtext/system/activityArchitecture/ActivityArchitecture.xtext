/********************************************************************************
 * Copyright (c) 2019 Technische Hochschule Ulm, Servicerobotics Ulm, Germany
 * 
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 * 
 * SPDX-License-Identifier: EPL-2.0
 * 
 * Contributors:
 *   Alex Lotz
 ********************************************************************************/
grammar org.eclipse.smartmdsd.xtext.system.activityArchitecture.ActivityArchitecture with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/smartmdsd/system/activityArchitecture" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

ActivityArchitectureModel returns ActivityArchitectureModel:
	{ActivityArchitectureModel}
	'ActivityArchitectureModel' name=ID
	'{'
		elements+=AbstractActivityArchitectureElement*
	'}';

EDouble returns ecore::EDouble:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;
EInt returns ecore::EInt:
	'-'? INT;
EString returns ecore::EString:
	STRING;
FQN:
	ID ('.' ID)*
;

AbstractActivityArchitectureElement returns AbstractActivityArchitectureElement: 
	CPUCore | AbstractSourceNode | DataFlow
;


DataFlow returns DataFlow:
	'DataFlow'
	'{'
		'source' source=[AbstractSourceNode|FQN]
		'destination' destination=[AbstractInputNode|FQN]
	'}';

AbstractSourceNode returns AbstractSourceNode:
	ActivityNode | InputHandlerNode;

InputHandlerNode returns InputHandlerNode:
	{InputHandlerNode}
	'InputHandlerNode' name=ID
	'{'
		('input' inputNode=HandlerTriggerInputNode)? 
		('prescale' prescale=EInt)?
	'}';

HandlerTriggerInputNode returns TriggerInputNode:
	{TriggerInputNode}
	'TriggerInputNode' name=ID (';')?
;


ActivityNode returns ActivityNode:
	{ActivityNode}
	'ActivityNode' name=ID
	'{'
		('inputs' '{' inputs+=AbstractInputNode* '}' )?
		(
			('cpuAffinity' affinity=[CPUCore|FQN] (';')?)? &
			('activationSource' activationSource=ActivationSource)? &
			('executionTime' executionTime=ExecutionTime)? &
			('scheduler' scheduler=Scheduler)?
		)
		
	'}';

AbstractInputNode returns AbstractInputNode:
	RegisterInputNode | TriggerInputNode;

RegisterInputNode returns RegisterInputNode:
	{RegisterInputNode}
	'RegisterInputNode'	name=ID (';')?
;

TriggerInputNode returns TriggerInputNode:
	{TriggerInputNode}
	'TriggerInputNode' name=ID (';')?
;



ActivationSource returns ActivationSource:
	Sporadic | DataTriggered | PeriodicTimer;

Sporadic returns Sporadic:
	{Sporadic}
	'Sporadic'
	'{'
		(
			('minActFreq' minActFreq=EDouble 'Hz' (';')?)? &
			('maxActFreq' maxActFreq=EDouble 'Hz' (';')?)?
		)
	'}';

DataTriggered returns DataTriggered:
	'DataTriggered' triggerRef=[TriggerInputNode|FQN]
	'{'
		'prescale' prescale=EInt (';')?
	'}';

PeriodicTimer returns PeriodicTimer:
	'PeriodicTimer'
	'{'
		'periodicActFreq' periodicActFreq=EDouble 'Hz' (';')?
	'}';
	
	
	
Scheduler returns Scheduler:
	{Scheduler}
//	'Scheduler'
	'{'
		(
			('type' type=SchedulerType (';')?)? &
			('priority' priority=EInt (';')?)?
		)
	'}';
	
enum SchedulerType returns SchedulerType:
	DEFAULT = 'DEFAULT' | FIFO = 'FIFO' | RR = 'RR';

CPUCore returns CPUCore:
	'CPUCore' name=ID
	'{'
		'coreNumber' coreNumber=EInt (';')?
	'}';

ExecutionTime returns ExecutionTime:
//	'ExecutionTime'
	'{'
		(
			('minTime' minTime=TimeValue (';')?) &
			('maxTime' maxTime=TimeValue (';')?)
		)
	'}';

TimeValue returns TimeValue:
	value=EInt unit=TimeUnit
;

enum TimeUnit returns TimeUnit:
	SEC = 'sec' | MSEC = 'ms' | USEC = 'us';
