//================================================================
//
//  Copyright (C) 2017 Alex Lotz, Dennis Stampfer, Matthias Lutz
//
//        lotz@hs-ulm.de
//        stampfer@hs-ulm.de
//        lutz@hs-ulm.de
//
//        Servicerobotik Ulm
//        Christian Schlegel
//        Ulm University of Applied Sciences
//        Prittwitzstr. 10
//        89075 Ulm
//        Germany
//
//  This file is part of the SmartMDSD Toolchain V3. 
//
//================================================================
grammar org.eclipse.smartmdsd.xtext.system.componentArchitecture.ComponentArchitecture with org.eclipse.smartmdsd.xtext.service.roboticMiddleware.RoboticMiddleware

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/smartmdsd/system/componentArchitecture" 
import "http://www.eclipse.org/smartmdsd/component/componentDefinition" as componentDefinition
import "http://www.eclipse.org/smartmdsd/component/componentParameter" as componentParameter
import "http://www.eclipse.org/smartmdsd/system/systemParameter" as systemParameter
import "http://www.eclipse.org/smartmdsd/component/seronetExtension" as seronetExtension
import "http://www.eclipse.org/smartmdsd/system/compArchSeronetExtension" as compArchSeronetExtension
import "http://www.eclipse.org/smartmdsd/system/activityArchitecture" as activityArchitecture
import "http://www.eclipse.org/smartmdsd/system/compArchBehaviorExtension" as compArchBehaviorExtension
import "http://www.eclipse.org/smartmdsd/behavior/taskRealization" as taskRealization
import "http://www.eclipse.org/smartmdsd/behavior/skillRealization" as skillRealization

SystemComponentArchitecture returns SystemComponentArchitecture:
	{SystemComponentArchitecture}
	'SystemComponentArchitecture' name=ID ('usingActivityArchitecture' activityArch=[activityArchitecture::ActivityArchitectureModel|FQN])?
	'{'
		components+=ComponentInstance*
		connections+=Connection*
		extensions+=SystemExtension*
	'}';

SystemExtension returns SystemExtension:
	CoordinationModuleMapping | TaskRealizationModelRef
;

Connection returns Connection:
	'Connection' from=[RequiredService|FQN] '->' to=[ProvidedService|FQN] ('useMiddleware' middlewareSelection=RoboticMiddleware)? (';')?
;

ComponentInstance returns ComponentInstance:
	'ComponentInstance' name=ID 'instantiates' component=[componentDefinition::ComponentDefinition|FQN]
	'{'
		ports+=ServiceInstance*
		extensions+=ComponentInstanceExtension*
	'}';

ComponentInstanceExtension returns ComponentInstanceExtension: 
	ParameterStructInstance | ActivityConfigurationMapping | InputHandlerConfigurationMapping | OpcUaDeviceClientInstance | OpcUaReadServerInstance
;

ParameterStructInstance returns systemParameter::ParameterStructInstance:
	'ParameterStructInstance' parameter=[systemParameter::ComponentParameterInstance|FQN] (';')?
;

ActivityConfigurationMapping returns ActivityConfigurationMapping: 
	'Activity' activity=[componentDefinition::Activity|FQN] 'configuration' config=[activityArchitecture::ActivityNode|FQN] (';')?
;

InputHandlerConfigurationMapping returns InputHandlerConfigurationMapping: 
	'InputHandler' handler=[componentDefinition::InputHandler|FQN] 'configuration' config=[activityArchitecture::InputHandlerNode|FQN] (';')?
;

OpcUaDeviceClientInstance returns compArchSeronetExtension::OpcUaDeviceClientInstance: 
	'OpcUaDeviceClientInstance' deviceClient=[seronetExtension::OpcUaDeviceClient|FQN] 'deviceURI' deviceURI=EString (';')?
;

OpcUaReadServerInstance returns compArchSeronetExtension::OpcUaReadServerInstance: 
	'OpcUaReadServerInstance' readServer=[seronetExtension::OpcUaReadServer|FQN] ('portNumber' portNumber=EInt)? (';')?
;


ServiceInstance returns ServiceInstance: 
	RequiredService | ProvidedService
;

RequiredService returns RequiredService:
	'RequiredService' port=[componentDefinition::ComponentPort] (';')?
;

ProvidedService returns ProvidedService:
	'ProvidedService' port=[componentDefinition::ComponentPort] (';')?
;

CoordinationModuleMapping returns compArchBehaviorExtension::CoordinationModuleMapping:
	'CoordinationModuleMapping' '{'
	'moduleInstance' coordModuleInst=[taskRealization::AbstractCoordinationModuleInstance|FQN] 'realizedby' coordModReal=[skillRealization::CoordinationModuleRealization]
	    '{'
			coordInterCompInstMapping+=CoordinationInterfaceComponentInstanceMapping+
		'}'
	'}'  
;

CoordinationInterfaceComponentInstanceMapping returns compArchBehaviorExtension::CoordinationInterfaceComponentInstanceMapping:
	'interfaceInstance' coordInterInst=[skillRealization::CoordinationInterfaceInstance] 'realizedby' compInst=[ComponentInstance]
;

TaskRealizationModelRef returns compArchBehaviorExtension::TaskRealizationModelRef: 
	'BehaviorTaskRef' taskModelRef=[taskRealization::TaskRealizationModel|FQN]
;

