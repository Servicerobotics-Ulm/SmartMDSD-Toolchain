//================================================================
//
//  Copyright (C) 2017 Alex Lotz, Dennis Stampfer, Matthias Lutz
//
//        lotz@hs-ulm.de
//        stampfer@hs-ulm.de
//        lutz@hs-ulm.de
//
//        Servicerobotik Ulm
//        Christian Schlegel
//        Ulm University of Applied Sciences
//        Prittwitzstr. 10
//        89075 Ulm
//        Germany
//
//  This file is part of the SmartMDSD Toolchain V3. 
//
//================================================================
grammar org.eclipse.smartmdsd.xtext.system.deployment.Deployment with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/smartmdsd/system/deployment" 
import "http://www.eclipse.org/smartmdsd/system/targetPlatform" as targetPlatform
import "http://www.eclipse.org/smartmdsd/system/componentArchitecture" as componentArchitecture

DeploymentModel returns DeploymentModel:
	'DeploymentModel' name=ID ('using' 'ComponentArchitecture' componentArch=[componentArchitecture::SystemComponentArchitecture|FQN])?
	'{'
		elements+=AbstractDeploymentElement*
	'}';

AbstractDeploymentElement returns AbstractDeploymentElement:
	NamingService | TargetPlatformReference | ComponentArtefact | TargetModelInclude
;

EInt returns ecore::EInt:
	'-'? INT;
EString returns ecore::EString:
	STRING
;
	
FQN:
	ID ('.'ID)*
;

TargetModelInclude returns TargetModelInclude: 
	'#import' importedNamespace=EString (';')?
;


TargetPlatformReference returns TargetPlatformReference:
	'TargetPlatformReference' name=ID 'using' platform=[targetPlatform::TargetPlatformDefinition|FQN] '{'
		(
			(directory=UploadDirectory)? &
			(login=LoginAccountSelection)? &
			(host=NetworkInterfaceSelection)?
		)
	'}'
;

UploadDirectory returns UploadDirectory: 
	'UploadDirectory' path=STRING
;

LoginAccountSelection returns LoginAccountSelection:
	'LoginAccount' login=[targetPlatform::LoginAccount|FQN]
;

NetworkInterfaceSelection returns NetworkInterfaceSelection:
	'NetworkInterface' network=[targetPlatform::NetworkInterface|FQN]
;


ComponentArtefact returns ComponentArtefact:
	'ComponentArtefact' component=[componentArchitecture::ComponentInstance|FQN] (deploy=Deployment)? (';')?;

NamingService returns NamingService:
	{NamingService}
	'NamingService'
	'{'
		(
			('portNr' portNr=EInt)? &
			(deploy=Deployment)?
		)
	'}';

Deployment returns Deployment:
	'deploy-to' to=[TargetPlatformReference|FQN]
;

