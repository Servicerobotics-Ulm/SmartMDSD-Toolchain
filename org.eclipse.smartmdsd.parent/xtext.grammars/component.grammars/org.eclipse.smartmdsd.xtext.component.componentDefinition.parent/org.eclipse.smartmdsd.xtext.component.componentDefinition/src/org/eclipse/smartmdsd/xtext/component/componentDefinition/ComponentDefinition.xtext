/********************************************************************************
 * Copyright (c) 2017 Technische Hochschule Ulm, Servicerobotics Ulm, Germany
 * 
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 * 
 * SPDX-License-Identifier: EPL-2.0
 * 
 * Contributors:
 *   Alex Lotz, Dennis Stampfer, Matthias Lutz
 ********************************************************************************/
grammar org.eclipse.smartmdsd.xtext.component.componentDefinition.ComponentDefinition with org.eclipse.smartmdsd.xtext.service.roboticMiddleware.RoboticMiddleware

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/smartmdsd/service/serviceDefinition" as serviceDefinition
import "http://www.eclipse.org/smartmdsd/service/componentMode" as modes
import "http://www.eclipse.org/smartmdsd/component/componentDefinition" as component
import "http://www.eclipse.org/smartmdsd/component/componentParameter" as parameter
import "http://www.eclipse.org/smartmdsd/component/performanceExtension" as performance
import "http://www.eclipse.org/smartmdsd/component/coordinationExtension" as coordination
import "http://www.eclipse.org/smartmdsd/behavior/skillRealization" as skillRealization
import "http://www.eclipse.org/smartmdsd/component/seronetExtension" as seronet
import "http://www.eclipse.org/smartmdsd/base/stateMachine" as stateMach
import "http://www.eclipse.org/smartmdsd/base/mixedport" as mixedport

ComponentDefModel returns component::ComponentDefModel:
	{component::ComponentDefModel}
	(imports+=ServiceRepoImport)*
	(component=ComponentDefinition)?
;

// imports can be optionally used to simplify names of objects from a remote repository
ServiceRepoImport returns component::ServiceRepoImport:
	'#import' importedNamespace=FQNW (';')?
;

ComponentDefinition returns component::ComponentDefinition:
	(documentation=DOCU_COMMENT)?
	'ComponentDefinition' name=ID ('logo' logo=STRING)?
	'{'
		(elements+=AbstractComponentElement)*
	'}';

AbstractComponentElement returns component::AbstractComponentElement: 
	NamedComponentElement | DerivedComponentElement | PlainOpcUaPort
;

DerivedComponentElement returns component::DerivedComponentElement: 
	ComponentParametersRef | MixedPortROS | MixedPortYARP
;


NamedComponentElement returns component::NamedComponentElement: 
	ComponentSubNode | ComponentPort | CoordinationSlavePort | CoordinationMasterPort
;


ComponentSubNode returns component::ComponentSubNode: 
	Activity | InputHandler | RequestHandler
;


ComponentPort returns component::ComponentPort: 
	InputPort | AnswerPort | OutputPort | RequestPort
;


RequestPort returns component::RequestPort: 
	(documentation=DOCU_COMMENT)?
	'RequestPort' name=ID 
	'implements' service=[serviceDefinition::TwoWayCommunicationService|FQN] 
	'{'
		extensions+=ComponentPortExtension*
	'}'
;


OutputPort returns component::OutputPort:
	(documentation=DOCU_COMMENT)?
	'OutputPort' name=ID 
	'implements' service=[serviceDefinition::OneWayCommunicationService|FQN] 
	'realizedBy' activity=[component::Activity|FQN]
	'{'
		extensions+=ComponentPortExtension*
	'}'
;

AnswerPort returns component::AnswerPort:
	(documentation=DOCU_COMMENT)? 
	'AnswerPort' name=ID 'implements' service=[serviceDefinition::TwoWayCommunicationService|FQN] '{'
		extensions+=ComponentPortExtension*
	'}'
;

InputPort returns component::InputPort:
	(documentation=DOCU_COMMENT)?
	'InputPort' name=ID 'implements' service=[serviceDefinition::OneWayCommunicationService|FQN] '{'
		extensions+=ComponentPortExtension*
	'}'
;

ComponentPortExtension returns component::ComponentPortExtension: 
	SupportedMiddleware
;

SupportedMiddleware returns seronet::SupportedMiddleware: 
	'SupportedMiddleware' (default?='default')? middleware=RoboticMiddleware (';')?
;

Activity returns component::Activity:
	'Activity' name=ID
	'{'
		links+=AbstractComponentLink*
		extensions+=ActivityExtension*
	'}'
;

InputHandler returns component::InputHandler:
	'InputHandler' name=ID 'triggeredFrom' inputPort=[component::InputPort|FQN] (activeQueue?='activeQueue')? '{' 
		links+=AbstractComponentLink*
	'}'
;

RequestHandler returns component::RequestHandler:
	'RequestHandler' name=ID 'triggeredFrom' answerPort=[component::AnswerPort|FQN] (activeQueue?='activeQueue')? '{'
		links+=AbstractComponentLink*
	'}'
;

AbstractComponentLink returns component::AbstractComponentLink: 
	ComponentSubNodeObserver| RequestPortLink | InputLinkExtension | OpcUaClientLink | MixedPortROSLink
;


RequestPortLink returns component::RequestPortLink: 
	'RequestPortLink' requestPort=[component::RequestPort|FQN] (';')?
;

OpcUaClientLink returns seronet::OpcUaClientLink: 
	'OpcUaClientLink' client=[seronet::OpcUaDeviceClient|FQN] (';')?
;

MixedPortROSLink returns seronet::MixedPortROSLink: 
	'MixedPortROSLink' mixedportros=[seronet::MixedPortROS|FQN] (';')?
;



/**
 * Observer Pattern for component-internal activities<->upcalls interaction.
 */
ComponentSubNodeObserver returns component::ComponentSubNodeObserver: 
	'Observe' subject=[component::ComponentSubNode|FQN] (';')?
;
 
/**
 * InputLink extension(s):
 * - Performance: InputLinkExtension
 */
InputLinkExtension returns performance::InputLinkExtension: 
	{performance::InputLinkExtension}
	'InputPortLink' inputPort=[component::InputPort|FQN]
	'{'
		((optional?='optional')? &
		(oversamplingOk?='oversamplingOk')? &
		(undersamplingOk?='undersamplingOk')?)
	'}'	
;

/** 
 * Activity extensions:
 * - Performance: ActivationConstraints
 * - Coordination: OperationModeBinding
 * - DefaultTrigger
 */
ActivityExtension returns component::ActivityExtension:
	ActivationConstraints | OperationModeBinding | DefaultTrigger
;

ActivationConstraints returns performance::ActivationConstraints:
	{performance::ActivationConstraints}
	'ActivationConstraints'
	'{'
		'configurable' '=' configurable=EBoolean (';')?
		(('minActFreq' '=' minActFreq=EDouble 'Hz' (';')?)? &
		('maxActFreq' '=' maxActFreq=EDouble 'Hz' (';')?)?)
	'}';


OperationModeBinding returns coordination::OperationModeBinding: 
	'OperationModeBinding' mode=[coordination::PrivateOperationMode|FQN] (';')?
;

DefaultTrigger returns performance::DefaultTrigger: 
	'DefaultTrigger' (DefaultInputTrigger | DefaultPeriodicTimer | DefaultObservedElementTrigger) (';')?
;

DefaultInputTrigger returns performance::DefaultInputTrigger: 
	'InputPortTrigger' inputLink=[performance::InputLinkExtension|FQN] ('prescale' prescale=EInt)?
;

DefaultPeriodicTimer returns performance::DefaultPeriodicTimer: 
	'PeriodicTimer' periodicActFreq=EDouble 'Hz'
;

DefaultObservedElementTrigger returns performance::DefaultObservedElementTrigger: 
	'ObservedElement' element=[component::ComponentSubNode|FQN]
;



PlainOpcUaPort returns seronet::PlainOpcUaPort: 
	OpcUaDeviceClient | OpcUaReadServer
;

OpcUaDeviceClient returns seronet::OpcUaDeviceClient: 
	'OpcUaDeviceClient' name=ID '{'
		( 
			('deviceURI' deviceURI=EString) & 
			(autoConnect?='autoConnect')? &
			('rootObjectPath' rootObjectPath=EString)? &
			('opcuaXmlFile' opcuaXmlFile=EString)?
		) 
	'}'
;

OpcUaReadServer returns seronet::OpcUaReadServer: 
	'OpcUaReadServer' name=ID 'dataProviderPort' outPort=[component::OutputPort|FQN] ('portNumber' portNumber=EInt)? (';')?
;

MixedPortROS returns seronet::MixedPortROS: 
	'MixedPortROS' port=[mixedport::MixedPortROSBase] (';')?
;

MixedPortYARP returns seronet::MixedPortYARP: 
	'MixedPortYARP' port=[mixedport::MixedPortYARPBase] (';')?
;


CoordinationSlavePort returns coordination::CoordinationSlavePort: 
	(documentation=DOCU_COMMENT)?
	'CoordinationSlavePort' name=ID 'implements' service=[serviceDefinition::CoordinationServiceDefinition|FQN] '{'
		(elements+=AbstractCoordinationElement)*
	'}'
;

AbstractCoordinationElement returns coordination::AbstractCoordinationElement: 
	PublicOperationMode | PrivateOperationMode | CommunicationServiceUsageRealization | SkillRealizationsRef
;

SkillRealizationsRef returns coordination::SkillRealizationsRef: 
	'SkillRealizationsRef' skillRealizationCoordModuleRef=[skillRealization::CoordinationModuleRealization|FQN] (';')?
;

CommunicationServiceUsageRealization returns coordination::CommunicationServiceUsageRealization: 
	'with' serviceUsage=[serviceDefinition::CommunicationServiceUsage|FQN] 'realizedBy' componentPort=[component::ComponentPort|FQN]
;


PublicOperationMode returns coordination::PublicOperationMode:
	{coordination::PublicOperationMode}
	(documentation=DOCU_COMMENT)?
	(isDefaultInit?='default')? 'PublicOperationMode' mode=[modes::ComponentModeDefinition|FQN] '{'
		('activates' '(' activates+=[coordination::PrivateOperationMode] (',' activates+=[coordination::PrivateOperationMode])* ')')?
	'}'
;

PrivateOperationMode returns coordination::PrivateOperationMode: 
	'PrivateOperationMode' name=ID (';')?
;

CoordinationMasterPort returns coordination::CoordinationMasterPort: 
	'CoordinationMasterPort' name=ID 'implements' service=[serviceDefinition::CoordinationServiceDefinition|FQN] (';')?
;


ComponentParametersRef returns parameter::ComponentParametersRef: 
	'ComponentParameters' parameter=[parameter::ComponentParameter|FQN] ('slave' slave=[coordination::CoordinationSlavePort|FQN])? (';')?
;
