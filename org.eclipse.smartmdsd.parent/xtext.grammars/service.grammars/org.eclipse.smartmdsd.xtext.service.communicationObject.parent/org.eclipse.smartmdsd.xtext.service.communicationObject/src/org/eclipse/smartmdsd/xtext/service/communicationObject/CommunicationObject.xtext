/********************************************************************************
 * Copyright (c) 2017 Technische Hochschule Ulm, Servicerobotics Ulm, Germany
 * 
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 * 
 * SPDX-License-Identifier: EPL-2.0
 * 
 * Contributors:
 *   Alex Lotz, Dennis Stampfer, Matthias Lutz
 ********************************************************************************/
grammar org.eclipse.smartmdsd.xtext.service.communicationObject.CommunicationObject with org.eclipse.smartmdsd.xtext.base.basicAttributes.BasicAttributes

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/smartmdsd/service/communicationObject" as comm
import "http://www.eclipse.org/smartmdsd/base/basicAttributes" as attr

CommObjectModel returns comm::CommObjectModel:
	imports+=CommRepositoryImport*
	(repository=CommObjectsRepository)?
;

FQNW returns ecore::EString: FQN '.*'? ;

// imports can be optionally used to simplify names of objects from a remote repository
CommRepositoryImport returns comm::CommRepositoryImport:
	'#import' importedNamespace=FQNW (';')?
;

// this is the main element in a model
CommObjectsRepository returns comm::CommObjectsRepository:
	(documentation=DOCU_COMMENT)?
	'CommObjectsRepository' name=ID ('version' version=Version)? '{'
		("Dependency" dependency=EString (';')?)?
		elements+=AbstractCommElement*
	'}'
;

Version returns comm::Version:
	major=INT '.' minor=INT ('.' patch=INT)?
;

AbstractCommElement returns comm::AbstractCommElement:
	Enumeration | CommunicationObject;


CommunicationObject returns comm::CommunicationObject:
	(documentation=DOCU_COMMENT)?
	'CommObject' name=ID '{'
		attributes+=AttributeDefinition*
	'}'
;

Enumeration returns comm::Enumeration:
	(documentation=DOCU_COMMENT)?
	'Enumeration' name=ID '{'
		enums+=EnumerationElement*
	'}'
;

@Override
AbstractAttributeType returns attr::AbstractAttributeType:
	CommElementReference | super;



CommElementReference returns comm::CommElementReference:
	typeName=[comm::AbstractCommElement|FQN] (array=ArrayType)?
;

@Override 
SingleValue returns attr::SingleValue:
	{comm::CommElementValue} value=[comm::AbstractCommElement|FQN] '(' ')' // TODO: further constructor types could be defined in the future
	| super 
;
