/**
 */
package org.ecore.component.componentDefinition.provider;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.util.ResourceLocator;

import org.eclipse.emf.edit.domain.EditingDomain;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ChildCreationExtenderManager;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IChildCreationExtender;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.ecore.component.componentDefinition.ComponentDefinitionPackage;

import org.ecore.component.componentDefinition.util.ComponentDefinitionAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ComponentDefinitionItemProviderAdapterFactory extends ComponentDefinitionAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable, IChildCreationExtender {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This helps manage the child creation extenders.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChildCreationExtenderManager childCreationExtenderManager = new ChildCreationExtenderManager(
			ComponentDefinitionEditPlugin.INSTANCE, ComponentDefinitionPackage.eNS_URI);

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComponentDefinitionItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.ecore.component.componentDefinition.ComponentDefModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComponentDefModelItemProvider componentDefModelItemProvider;

	/**
	 * This creates an adapter for a {@link org.ecore.component.componentDefinition.ComponentDefModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComponentDefModelAdapter() {
		if (componentDefModelItemProvider == null) {
			componentDefModelItemProvider = new ComponentDefModelItemProvider(this);
		}

		return componentDefModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.ecore.component.componentDefinition.ComponentDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComponentDefinitionItemProvider componentDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link org.ecore.component.componentDefinition.ComponentDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComponentDefinitionAdapter() {
		if (componentDefinitionItemProvider == null) {
			componentDefinitionItemProvider = new ComponentDefinitionItemProvider(this);
		}

		return componentDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.ecore.component.componentDefinition.Activity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivityItemProvider activityItemProvider;

	/**
	 * This creates an adapter for a {@link org.ecore.component.componentDefinition.Activity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActivityAdapter() {
		if (activityItemProvider == null) {
			activityItemProvider = new ActivityItemProvider(this);
		}

		return activityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.ecore.component.componentDefinition.InputHandler} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InputHandlerItemProvider inputHandlerItemProvider;

	/**
	 * This creates an adapter for a {@link org.ecore.component.componentDefinition.InputHandler}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInputHandlerAdapter() {
		if (inputHandlerItemProvider == null) {
			inputHandlerItemProvider = new InputHandlerItemProvider(this);
		}

		return inputHandlerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.ecore.component.componentDefinition.ServiceRepoImport} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServiceRepoImportItemProvider serviceRepoImportItemProvider;

	/**
	 * This creates an adapter for a {@link org.ecore.component.componentDefinition.ServiceRepoImport}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServiceRepoImportAdapter() {
		if (serviceRepoImportItemProvider == null) {
			serviceRepoImportItemProvider = new ServiceRepoImportItemProvider(this);
		}

		return serviceRepoImportItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.ecore.component.componentDefinition.OutputPort} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OutputPortItemProvider outputPortItemProvider;

	/**
	 * This creates an adapter for a {@link org.ecore.component.componentDefinition.OutputPort}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOutputPortAdapter() {
		if (outputPortItemProvider == null) {
			outputPortItemProvider = new OutputPortItemProvider(this);
		}

		return outputPortItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.ecore.component.componentDefinition.RequestPort} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RequestPortItemProvider requestPortItemProvider;

	/**
	 * This creates an adapter for a {@link org.ecore.component.componentDefinition.RequestPort}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRequestPortAdapter() {
		if (requestPortItemProvider == null) {
			requestPortItemProvider = new RequestPortItemProvider(this);
		}

		return requestPortItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.ecore.component.componentDefinition.InputPort} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InputPortItemProvider inputPortItemProvider;

	/**
	 * This creates an adapter for a {@link org.ecore.component.componentDefinition.InputPort}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInputPortAdapter() {
		if (inputPortItemProvider == null) {
			inputPortItemProvider = new InputPortItemProvider(this);
		}

		return inputPortItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.ecore.component.componentDefinition.AnswerPort} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AnswerPortItemProvider answerPortItemProvider;

	/**
	 * This creates an adapter for a {@link org.ecore.component.componentDefinition.AnswerPort}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAnswerPortAdapter() {
		if (answerPortItemProvider == null) {
			answerPortItemProvider = new AnswerPortItemProvider(this);
		}

		return answerPortItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.ecore.component.componentDefinition.RequestHandler} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RequestHandlerItemProvider requestHandlerItemProvider;

	/**
	 * This creates an adapter for a {@link org.ecore.component.componentDefinition.RequestHandler}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRequestHandlerAdapter() {
		if (requestHandlerItemProvider == null) {
			requestHandlerItemProvider = new RequestHandlerItemProvider(this);
		}

		return requestHandlerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.ecore.component.componentDefinition.ComponentSubNodeObserver} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComponentSubNodeObserverItemProvider componentSubNodeObserverItemProvider;

	/**
	 * This creates an adapter for a {@link org.ecore.component.componentDefinition.ComponentSubNodeObserver}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComponentSubNodeObserverAdapter() {
		if (componentSubNodeObserverItemProvider == null) {
			componentSubNodeObserverItemProvider = new ComponentSubNodeObserverItemProvider(this);
		}

		return componentSubNodeObserverItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.ecore.component.componentDefinition.InputPortLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InputPortLinkItemProvider inputPortLinkItemProvider;

	/**
	 * This creates an adapter for a {@link org.ecore.component.componentDefinition.InputPortLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInputPortLinkAdapter() {
		if (inputPortLinkItemProvider == null) {
			inputPortLinkItemProvider = new InputPortLinkItemProvider(this);
		}

		return inputPortLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.ecore.component.componentDefinition.RequestPortLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RequestPortLinkItemProvider requestPortLinkItemProvider;

	/**
	 * This creates an adapter for a {@link org.ecore.component.componentDefinition.RequestPortLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRequestPortLinkAdapter() {
		if (requestPortLinkItemProvider == null) {
			requestPortLinkItemProvider = new RequestPortLinkItemProvider(this);
		}

		return requestPortLinkItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public List<IChildCreationExtender> getChildCreationExtenders() {
		return childCreationExtenderManager.getChildCreationExtenders();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Collection<?> getNewChildDescriptors(Object object, EditingDomain editingDomain) {
		return childCreationExtenderManager.getNewChildDescriptors(object, editingDomain);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ResourceLocator getResourceLocator() {
		return childCreationExtenderManager;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (componentDefModelItemProvider != null)
			componentDefModelItemProvider.dispose();
		if (componentDefinitionItemProvider != null)
			componentDefinitionItemProvider.dispose();
		if (activityItemProvider != null)
			activityItemProvider.dispose();
		if (inputHandlerItemProvider != null)
			inputHandlerItemProvider.dispose();
		if (serviceRepoImportItemProvider != null)
			serviceRepoImportItemProvider.dispose();
		if (outputPortItemProvider != null)
			outputPortItemProvider.dispose();
		if (requestPortItemProvider != null)
			requestPortItemProvider.dispose();
		if (inputPortItemProvider != null)
			inputPortItemProvider.dispose();
		if (answerPortItemProvider != null)
			answerPortItemProvider.dispose();
		if (requestHandlerItemProvider != null)
			requestHandlerItemProvider.dispose();
		if (componentSubNodeObserverItemProvider != null)
			componentSubNodeObserverItemProvider.dispose();
		if (inputPortLinkItemProvider != null)
			inputPortLinkItemProvider.dispose();
		if (requestPortLinkItemProvider != null)
			requestPortLinkItemProvider.dispose();
	}

}
